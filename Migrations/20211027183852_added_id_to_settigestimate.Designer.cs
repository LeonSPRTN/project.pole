// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using project.pole.Data;

namespace project.pole.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20211027183852_added_id_to_settigestimate")]
    partial class added_id_to_settigestimate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.11");

            modelBuilder.Entity("project.pole.Models.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Area")
                        .HasColumnType("longtext")
                        .HasColumnName("area");

                    b.Property<string>("City")
                        .HasColumnType("longtext")
                        .HasColumnName("city");

                    b.Property<string>("Flat")
                        .HasColumnType("longtext")
                        .HasColumnName("Flat");

                    b.Property<string>("House")
                        .HasColumnType("longtext")
                        .HasColumnName("house");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Region")
                        .HasColumnType("longtext")
                        .HasColumnName("region");

                    b.Property<string>("Settlement")
                        .HasColumnType("longtext")
                        .HasColumnName("settlement");

                    b.Property<string>("Street")
                        .HasColumnType("longtext")
                        .HasColumnName("street");

                    b.HasKey("Id");

                    b.ToTable("customer");
                });

            modelBuilder.Entity("project.pole.Models.Estimate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_created");

                    b.Property<long>("ObjectWorkId")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .HasColumnType("longtext")
                        .HasColumnName("path");

                    b.HasKey("Id");

                    b.HasIndex("ObjectWorkId")
                        .IsUnique();

                    b.ToTable("estimate");
                });

            modelBuilder.Entity("project.pole.Models.ObjectWork", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Body")
                        .HasColumnType("longtext")
                        .HasColumnName("body");

                    b.Property<double>("Budget")
                        .HasColumnType("double")
                        .HasColumnName("budget");

                    b.Property<double>("BuildingArea")
                        .HasColumnType("double")
                        .HasColumnName("building_area");

                    b.Property<string>("City")
                        .HasColumnType("longtext")
                        .HasColumnName("city");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("House")
                        .HasColumnType("longtext")
                        .HasColumnName("house");

                    b.Property<double>("Inteco")
                        .HasColumnType("double")
                        .HasColumnName("inteco");

                    b.Property<bool>("MoscowCoefficient")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("moscow_coefficient");

                    b.Property<double>("PitDepth")
                        .HasColumnType("double")
                        .HasColumnName("pit_depth");

                    b.Property<double>("PlotArea")
                        .HasColumnType("double")
                        .HasColumnName("plot_area");

                    b.Property<string>("Street")
                        .HasColumnType("longtext")
                        .HasColumnName("street");

                    b.Property<bool>("Track")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("track");

                    b.Property<double>("WinterCoefficient")
                        .HasColumnType("double")
                        .HasColumnName("winter_coefficient");

                    b.Property<double>("WithoutCoefficient")
                        .HasColumnType("double")
                        .HasColumnName("without_coefficient");

                    b.Property<bool>("WithoutRadon")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("without_radon");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("object_work");
                });

            modelBuilder.Entity("project.pole.Models.SettingEstimate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<int>("BudgetCoefficient")
                        .HasColumnType("int")
                        .HasColumnName("budget_coefficient");

                    b.Property<int>("InflationRate")
                        .HasColumnType("int")
                        .HasColumnName("inflation_rate");

                    b.Property<int>("IntecoCoefficient")
                        .HasColumnType("int")
                        .HasColumnName("inteco_coefficient");

                    b.Property<int>("Nds")
                        .HasColumnType("int")
                        .HasColumnName("nds");

                    b.HasKey("Id");

                    b.ToTable("setting_estimate");
                });

            modelBuilder.Entity("project.pole.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Login")
                        .HasColumnType("longtext")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.ToTable("user");
                });

            modelBuilder.Entity("project.pole.Models.Estimate", b =>
                {
                    b.HasOne("project.pole.Models.ObjectWork", "ObjectWork")
                        .WithOne("Estimaet")
                        .HasForeignKey("project.pole.Models.Estimate", "ObjectWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ObjectWork");
                });

            modelBuilder.Entity("project.pole.Models.ObjectWork", b =>
                {
                    b.HasOne("project.pole.Models.Customer", "Customer")
                        .WithMany("ObjectWorks")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("project.pole.Models.Customer", b =>
                {
                    b.Navigation("ObjectWorks");
                });

            modelBuilder.Entity("project.pole.Models.ObjectWork", b =>
                {
                    b.Navigation("Estimaet");
                });
#pragma warning restore 612, 618
        }
    }
}
